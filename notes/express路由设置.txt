在app.js中采用如下方式实现路由配置：
//优化路由
// app.get('/', routes.index);
// app.use(express.Router(routes)); //or routes(app);
 routes(app);

在路由文件中：routes/index.js
//配置：在app.js中加入 routes(app);
module.exports = function(app){
  app.get('/',function(req,res){
    res.render('home/index', { title: 'Express' });
  });
  app.get('/reg', function(req, res) {
    // res.cookie('hg','daheige');//设置cookie
    res.json({ user: 'tj' }); //响应json数据
    res.render('home/reg', {
      title: '用戶註冊',
    });
  });
};

备注：exports是module.exports的引用。这2个exports 其实是没有直接关系的,唯一的关系是: 他们初始都指向同一个空对象{}，如果其中一个不指向做个空对象了, 那么他们的关系就没有了。
我们经常看到这样的写法：
exports = module.exports = somethings
上面的代码等价于:
module.exports = somethings
exports = module.exports
原理很简单，即 module.exports 指向新的对象时，exports 断开了与 module.exports 的引用，那么通过 exports = module.exports 让 exports 重新指向 module.exports 即可。

exports 和 module.exports 的区别：
1、module.exports 初始值为一个空对象 {}
2、exports 是指向的 module.exports 的引用
3、require() 返回的是 module.exports 而不是 exports
